import time
import random
import re

from datetime import datetime, timedelta
from aiogram import Bot, types, asyncio
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.types.message import ContentType
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.contrib.fsm_storage.memory import MemoryStorage

import functions
from config import API_TOKEN
from dialogs import message as dialog
from database import database_ as db
from keyboards import keyboard
from states import DataState
from main import logging


# –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ë–û–¢–ê. –î–ò–°–ü–ï–¢–ß–ï–†–ê

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())



# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–õ–ë–ï–ö–û–í 

@dp.callback_query_handler(lambda call: call.data == 'menu')
async def menu_button(callback_query: types.CallbackQuery):
    """–í—ã–≤–æ–¥ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é, —á–µ—Ä–µ–∑ callback"""
    await bot.edit_message_text(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id,text=dialog.mainMenu,reply_markup=keyboard.MainMenu_keyboard)

    await bot.answer_callback_query(callback_query.id)
    logging.info(f'Callback Query ~ Catched by <{menu_button.__name__}> func ~ From {callback_query.from_user.id} : @{callback_query.from_user.username}')

@dp.callback_query_handler(lambda call: call.data == 'mypills')
async def get_mypills(callback_query: types.CallbackQuery):
    """–í—ã–≤–æ–¥ –≤—Å–µ—Ö —Ç–∞–±–ª–µ—Ç–æ–∫"""
    pills_list = await db.get_mypills(callback_query.from_user.id)

    # –ï–°–õ–ò –ü–û–õ–£–ß–ï–ù–ù–´–ô –°–ü–ò–°–û–ö –ü–£–°–¢–û–ô - –†–ï–î–ê–ö–¢–ò–†–£–ï–ú –°–û–û–ë–©–ï–ù–ò–ï –ú–û–õ –ù–ò–ß–ï–ì–û –ù–ï–¢ + –ö–ù–û–ü–ö–ê –ì–õ –ú–ï–ù–Æ
    # –ï–°–õ–ò –ï–°–¢–¨ - –í–´–í–û–î–ò–ú –°–ü–ò–°–û–ö –ü–û–ö–ê –û–ù –ù–ï –ë–û–õ–¨–®–ï 6

    if not pills_list:
        await bot.edit_message_text(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id,text=dialog.None_pills,reply_markup=keyboard.to_main_keyboard, parse_mode='html')
    else:
        text = "<b>–ú–æ–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã</b>\n\n"
        for item in pills_list:

            text += f"<a href='https://apteka.ru/search/?q={item[1]}'><b>{item[1]}</b></a>:\n–ö—É—Ä—Å –¥–ª–∏—Ç—Å—è <b>{item[2]}/{item[3]}</b> –¥–Ω–µ–π üóì\n–ü—Ä–∏–Ω—è—Ç–æ –≤ –¥–µ–Ω—å: <b>{item[4]}/{item[5]}</b> üíä\n"

            if item[6] != 0:
                text += f"–î–æ–∑–∏—Ä–æ–≤–∫–∞: <b>{item[6]}</b> –º–≥ üíâ\n"

            text += f"–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: <b>{item[7]}</b> ‚è≥\n"

            if item[8]: # –µ—Å–ª–∏ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –Ω–µ –ø—É—Å—Ç—ã–µ, —Ç–æ –≤—ã–≤–æ–¥–∏–º
                text += f"–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: <b>{item[8]}</b> üóí\n"
            
            text += '\n'

        await bot.edit_message_text(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id,text=text,reply_markup=keyboard.to_main_keyboard, parse_mode='html', disable_web_page_preview=True)
    await bot.answer_callback_query(callback_query.id)
    logging.info(f'Callback Query ~ Catched by <{get_mypills.__name__}> func ~ From {callback_query.from_user.id} : @{callback_query.from_user.username}')

@dp.callback_query_handler(lambda call: call.data == 'planconfirm')
async def confirm_plan(callback_query: types.CallbackQuery):
    """–í—ã–≥—Ä—É–∑–∫–∞ —á–∞—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–∞–±–ª–µ—Ç–∫–∞ + –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    pills_list = await db.get_mypills(callback_query.from_user.id)

    # –ï–°–õ–ò –ü–û–õ–£–ß–ï–ù–ù–´–ô –°–ü–ò–°–û–ö –ü–£–°–¢–û–ô - –†–ï–î–ê–ö–¢–ò–†–£–ï–ú –°–û–û–ë–©–ï–ù–ò–ï –ú–û–õ –ù–ò–ß–ï–ì–û –ù–ï–¢ + –ö–ù–û–ü–ö–ê –ì–õ. –ú–ï–ù–Æ
    # –ï–°–õ–ò –ï–°–¢–¨ - –í–´–í–û–î–ò–ú –ö–û–õ-–í–û –ö–ù–û–ü–û–ö = –ö–û–õ-–í–û –¢–ê–ë–õ–ï–¢–û–ö –Æ–ó–ï–†–ê –ò –û–°–ù–û–í–ù–´–ï –î–ê–ù–ù–´–ï –û –¢–û–ú, –°–ö–û–õ–¨–ö–û –í –î–ï–ù–¨ –û–°–¢–ê–õ–û–°–¨ –í–´–ü–ò–¢–¨

    if not pills_list:
        await bot.edit_message_text(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id,text=dialog.None_pills,reply_markup=keyboard.to_main_keyboard, parse_mode='html')
    else:
        text = "<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—Ä–∏—ë–º</b>\n\n"
        keyboard.confirm_keyboard = InlineKeyboardMarkup(row_width=2)
        for item in pills_list:
            text += f"<a href='https://apteka.ru/search/?q={item[1]}'><b>{item[1]}</b></a>:\n–ö—É—Ä—Å –¥–ª–∏—Ç—Å—è <b>{item[2]}/{item[3]}</b> –¥–Ω–µ–π üóì\n–ü—Ä–∏–Ω—è—Ç–æ –≤ –¥–µ–Ω—å: <b>{item[4]}/{item[5]}</b> üíä\n"

            if item[6] != 0:
                text += f"–î–æ–∑–∏—Ä–æ–≤–∫–∞: <b>{item[6]}</b> –º–≥ üíâ\n"

            text +='\n'

            keyboard.confirm_keyboard.insert(InlineKeyboardButton(f"{item[1]}",callback_data=f"confirm#{item[1]}"))
        keyboard.confirm_keyboard.add(InlineKeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üèõ', callback_data= 'menu'))

        await bot.edit_message_text(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id,text=text,reply_markup=keyboard.confirm_keyboard, parse_mode='html',disable_web_page_preview=True)
    await bot.answer_callback_query(callback_query.id)
    logging.info(f'Callback Query ~ Catched by <{confirm_plan.__name__}> func ~ From {callback_query.from_user.id} : @{callback_query.from_user.username}')

@dp.callback_query_handler(lambda call: call.data.startswith('confirm#'))
async def confirm_button(callback_query: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–ø–∏—Ç–æ–π —Ç–∞–±–ª–µ—Ç–∫–∏"""

    # –î–ï–õ–ê–ï–ú –°–ü–õ–ò–¢ –ö–û–õ–ë–ï–ö–ê –ò –ë–ï–†–ï–ú –ü–û–°–õ–ï–î–ù–Æ–Æ –ï–ì–û –ß–ê–°–¢–¨ - –ù–ê–ó–í–ê–ù–ò–ï –ü–†–ï–ü–ê–†–ê–¢–ê
    # –î–ê–õ–ï–ï –ó–ê–ü–†–û–° –í –ë–î, –ë–ï–†–ï–ú –î–ê–ù–ù–´–ï –ü–†–ï–ü–ê–†–ê–¢–ê –ò –ú–ï–ù–Ø–ï–ú –ó–ù–ê–ß–ï–ù–ò–ï –í–´–ü–ò–¢–û–ì–û –í –î–ï–ù–¨

    pill_data = await db.get_concreteness_pilldata(callback_query.from_user.id, callback_query.data.split("#")[-1])

    taken_changed = pill_data[0][4] + 1

    if taken_changed == pill_data[0][5]: # –µ—Å–ª–∏ –∫–æ–ª-–≤–æ –≤—ã–ø–∏—Ç–æ–≥–æ = –∫–æ–ª-–≤—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –≤ –¥–µ–Ω—å, —Ç–æ –¥–µ–Ω—å –∫—É—Ä—Å–∞ ++ –∏ –∫–æ–ª-–≤–æ –≤—ã–ø–∏—Ç–æ–≥–æ ++ -> –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö
        course_InDay_taken = pill_data[0][2] + 1
        
        if course_InDay_taken == pill_data[0][3]: # –µ—Å–ª–∏ –∫–æ–ª-–≤–æ –ø—Ä–æ–ø–∏—Ç—ã—Ö –¥–Ω–µ–π –∫—É—Ä—Å–∞ == –Ω–µ–±—Ö–æ–¥–∏–º–æ–º—É –∫–æ–ª-–≤—É –¥–Ω–µ–π, —Ç–æ–≥–¥–∞ —É–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            await bot.answer_callback_query(callback_query.id, show_alert=True, text=f"{pill_data[0][1]}: –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø—Ä–∏—ë–º –∫—É—Ä—Å–∞! {course_InDay_taken}/{pill_data[0][3]} –¥–Ω–µ–π! ü•≥")
            await db.set_countInDay_taken(callback_query.from_user.id,callback_query.data.split("#")[-1], taken_changed)
            await db.set_course_taken(callback_query.from_user.id,callback_query.data.split("#")[-1], course_InDay_taken)
            await db.delete_user_drug(callback_query.from_user.id,callback_query.data.split("#")[-1])
            await confirm_plan(callback_query)
        else:
            await bot.answer_callback_query(callback_query.id, text=f"{pill_data[0][1]}: c—É—Ç–æ—á–Ω–∞—è –Ω–æ—Ä–º–∞ –ø—Ä–∏–Ω—è—Ç–∞! ‚úÖ")
            await db.set_countInDay_taken(callback_query.from_user.id,callback_query.data.split("#")[-1], taken_changed)
            await db.set_course_taken(callback_query.from_user.id,callback_query.data.split("#")[-1], course_InDay_taken)
            await confirm_plan(callback_query)

    elif taken_changed < pill_data[0][5]:
        taken_changed = pill_data[0][4] + 1
        await bot.answer_callback_query(callback_query.id, text=f"{pill_data[0][1]}: –ø—Ä–∏—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! üëå")
        await db.set_countInDay_taken(callback_query.from_user.id,callback_query.data.split("#")[-1], taken_changed)
        await confirm_plan(callback_query)

    else:
        await bot.answer_callback_query(callback_query.id, text="–•—ç–π, –Ω–µ –º–Ω–æ–≥–æ –ª–∏ –±—É–¥–µ—Ç? ‚õîÔ∏è")
    logging.info(f'Callback Query ~ Catched by <{confirm_button.__name__}> func ~ From {callback_query.from_user.id} : @{callback_query.from_user.username}')

@dp.callback_query_handler(lambda call: call.data == 'delplan')
async def delete_plan(callback_query: types.CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–∞–±–ª–µ—Ç–∫–∞—Ö"""
    pills_list = await db.get_mypills(callback_query.from_user.id)

    # –ï–°–õ–ò –ü–û–õ–£–ß–ï–ù–ù–´–ô –°–ü–ò–°–û–ö –ü–£–°–¢–û–ô - –†–ï–î–ê–ö–¢–ò–†–£–ï–ú –°–û–û–ë–©–ï–ù–ò–ï –ú–û–õ –ù–ò–ß–ï–ì–û –ù–ï–¢ + –ö–ù–û–ü–ö–ê –ì–õ –ú–ï–ù–Æ
    # –ï–°–õ–ò –ï–°–¢–¨ - –í–´–í–û–î–ò–ú –ö–û–õ-–í–û –ö–ù–û–ü–û–ö = –ö–û–õ-–í–û –¢–ê–ë–õ–ï–¢–û–ö –Æ–ó–ï–†–ê –ò –û–°–ù–û–í–ù–´–ï –ò–• –î–ê–ù–ù–´–ï

    if not pills_list:
        await bot.edit_message_text(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id,text=dialog.None_pills,reply_markup=keyboard.to_main_keyboard, parse_mode='html')
    else:
        text = "<b>–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b>\n\n"
        keyboard.delete_keyboard = InlineKeyboardMarkup(row_width=2)
        for item in pills_list:
            pill = f"<a href='https://apteka.ru/search/?q={item[1]}'><b>{item[1]}</b></a>:\n–ö—É—Ä—Å –¥–ª–∏—Ç—Å—è <b>{item[2]}/{item[3]}</b> –¥–Ω–µ–π üóì\n\n"

            text += pill
            keyboard.delete_keyboard.insert(InlineKeyboardButton(f"{item[1]}",callback_data=f"delete#{item[1]}"))
        keyboard.delete_keyboard.add(InlineKeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üèõ', callback_data= 'menu'))

        await bot.edit_message_text(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id, text=text, reply_markup=keyboard.delete_keyboard, parse_mode='html', disable_web_page_preview=True)
    await bot.answer_callback_query(callback_query.id)
    logging.info(f'Callback Query ~ Catched by <{delete_plan.__name__}> func ~ From {callback_query.from_user.id} : @{callback_query.from_user.username}')

@dp.callback_query_handler(lambda call: call.data == ('edit'))
async def edit_plan(callback_query: types.CallbackQuery):
    """–ú–µ–Ω—é –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""

    if await db.get_user_allday(callback_query.from_user.id):
        await bot.edit_message_text(chat_id=callback_query.from_user.id,message_id=callback_query.message.message_id, text=dialog.edit, reply_markup=keyboard.edit_true_keyboard)
    else:
        await bot.edit_message_text(chat_id=callback_query.from_user.id,message_id=callback_query.message.message_id, text=dialog.edit, reply_markup=keyboard.edit_false_keyboard)
    
    await bot.answer_callback_query(callback_query.id)
    logging.info(f'Callback Query ~ Catched by <{edit_plan.__name__}> func ~ From {callback_query.from_user.id} : @{callback_query.from_user.username}')



# FSM –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–õ–ë–ï–ö–û–í 

@dp.callback_query_handler(lambda call: call.data.startswith('note#'))
async def edit_note(callback_query: types.CallbackQuery, state: FSMContext):
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫ —Ç–∞–±–ª–µ—Ç–∫–∏"""

    # –°–ü–õ–ò–¢ –ö–û–õ–ë–ï–ö–ê –ò –†–ê–ë–û–¢–ê–ï–ú –° –ù–ê–ó–í–ê–ù–ò–ï–ú –ü–†–ï–ü–ê–†–ê–¢–ê

    drug_name = callback_query.data.split("#")[-1]
    await bot.edit_message_text(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id, text="–ù–∞–ø–∏—à–∏ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π üìù\n–ù–∞–ø—Ä–∏–º–µ—Ä: <u>–ø–∏—Ç—å –ø–æ—Å–ª–µ –µ–¥—ã</u> üçú", reply_markup=keyboard.to_main_keyboard, parse_mode='html')
    await state.update_data(message_id=callback_query.message.message_id,drug_name=drug_name)
    await DataState.edit_note.set()

    await bot.answer_callback_query(callback_query.id)
    logging.info(f'Callback Query ~ Catched by <{edit_note.__name__}> func ~ From {callback_query.from_user.id} : @{callback_query.from_user.username}')

@dp.callback_query_handler(lambda call: call.data.startswith('delete#') or call.data.startswith('yes#') or call.data.startswith('no'))
async def delete_button(callback_query: types.CallbackQuery):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ + –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è"""

    # –ï–°–õ–ò –ö–û–õ–ë–ï–ö –ù–ê–ß–ò–ù–ê–ï–¢–°–Ø –° DELETE, –¢–û –†–ï–î–ê–ö–¢–ò–†–£–ï–ú –°–û–û–ë–©–ï–ù–ò–Ø, –¢–ï–ú –°–ê–ú–´–ú –°–ü–†–ê–®–ò–í–ê–Æ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –£ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø, –ú–û–õ, –£–î–ê–õ–ò–¢–¨?
    # –ï–°–õ–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ù–ê–ñ–ò–ù–ê–ï–ú –ù–ê –ö–ù–û–ü–ö–ò –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø, –¢–û –ü–†–û–ò–°–•–û–î–ò–¢ –î–ï–ô–°–¢–í–ò–ï

    if callback_query.data.startswith('delete#'):
        yes_no = InlineKeyboardMarkup(row_width=2).insert(InlineKeyboardButton('–ù–µ—Ç üôÖ‚Äç‚ôÄÔ∏è',callback_data='no')).insert(InlineKeyboardButton('–î–∞ üëå', callback_data=f'yes#{callback_query.data.split("#")[-1]}'))
        
        await bot.edit_message_text(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id, 
        text=f'<b>{callback_query.data.split("#")[-1]}</b>: —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ? ü§î', 
        reply_markup=yes_no, parse_mode='html')

    elif callback_query.data.startswith('yes#'):
        await db.delete_user_drug(callback_query.from_user.id, callback_query.data.split("#")[-1])
        await bot.answer_callback_query(callback_query.id, text=f'{callback_query.data.split("#")[-1]}: –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ! ‚úÖ')
        await menu_button(callback_query)
    else:
        await delete_plan(callback_query)
    
    await bot.answer_callback_query(callback_query.id)
    logging.info(f'Callback Query ~ Catched by <{delete_button.__name__}> func ~ From {callback_query.from_user.id} : @{callback_query.from_user.username}')

@dp.callback_query_handler(lambda call: call.data == 'addplan')
async def add_plan(callback_query: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞"""
    
    # –í–´–í–û–î –ù–ê–ß–ê–õ–¨–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô + –£–°–¢–ê–ù–û–í–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø –î–û–ë–ê–í–õ–ï–ù–ò–Ø

    drugs_count = await db.count_user_drugs(callback_query.from_user.id) # –ë–µ—Ä–µ–º –∫–æ–ª-–≤–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è -> –≤–æ–∑–≤–∞—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π -> –±–µ—Ä–µ–º –Ω—É–∂–Ω–æ–µ —á–∏—Å–ª–æ

    if drugs_count[0][0] < 6:
        await bot.edit_message_text(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id,text=dialog.start_addplan)
        time.sleep(1.5)
        await bot.edit_message_text(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id,text=dialog.drug_name_addplan, reply_markup=keyboard.to_main_keyboard)
        
        await state.update_data(message_id=callback_query.message.message_id)
        await DataState.wait_drug_name.set()
    else:
        await bot.edit_message_text(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id,text=dialog.pills_limit, reply_markup=keyboard.to_main_keyboard)
    await bot.answer_callback_query(callback_query.id)
    logging.info(f'Callback Query ~ Catched by <{add_plan.__name__}> func ~ From {callback_query.from_user.id} : @{callback_query.from_user.username}')

@dp.callback_query_handler(lambda call: call.data.startswith('time#'))
async def edit_time(callback_query: types.CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏"""

    # –ë–ï–†–ï–ú –ù–ê–ó–í–ê–ù–ò–ï –ü–†–ï–ü–ê–†–ê–¢–ê, –ò ID –°–û–û–ë–©–ï–ù–ò–Ø –° –ö–û–¢–û–†–û–ì–û –ù–ê–ß–ê–õ–û–°–¨ –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï - –°–£–ï–ú –í –ö–≠–®
    # –î–ê–õ–ï–ï –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –°–û–°–¢–û–Ø–ù–ò–Ø –ò–ó–ú–ï–ù–ï–ù–ò–Ø –í–†–ï–ú–ï–ù–ò - –°–†–ê–ë–û–¢–ê–ï–¢ –§–£–ù–ö–¶–ò–Ø —Å—Ç—Ä.622 - <course_time_written>

    drug_name = callback_query.data.split("#")[-1]
    await bot.edit_message_text(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id, text="–ö–æ–≥–¥–∞ —Ç–µ–±–µ –Ω–∞–ø–æ–º–Ω–∏—Ç—å? ‚è≥", reply_markup=keyboard.to_main_keyboard)
    await state.update_data(message_id=callback_query.message.message_id,drug_name=drug_name)
    await DataState.edit_time.set()

    await bot.answer_callback_query(callback_query.id)
    logging.info(f'Callback Query ~ Catched by <{edit_time.__name__}> func ~ From {callback_query.from_user.id} : @{callback_query.from_user.username}')

@dp.callback_query_handler(lambda call: call.data.startswith('edit#'))
async def edit_button(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±–µ–∫–æ–≤ –∏–∑ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""

    # –ü–ï–†–í–û–ï - –ò–ó–ú–ï–ù–ï–ù–ò–ï –ü–ê–†–ê–ú–ï–¢–†–ê ALLDAY, –ï–°–õ–ò –ï–°–¢–¨ –ù–£–ñ–ù–´–ô –ù–ê–ú –ö–û–õ–ë–ï–ö –ò –ë–ê–ó–ê –î–ê–ù–ù–´–• –í–û–ó–í–†–ê–©–ê–ï–¢ –ü–ê–†–ê–ú–ï–¢–† ALLDAY –Æ–ó–ï–†–ê TRUE - –ú–ï–ù–Ø–ï–ú –ù–ê FALSE
    # –í–´–ó–´–í–ê–ï–ú –ú–ï–ù–Æ EDIT –°–ù–û–í–ê, –ì–î–ï –ú–ï–ù–Ø–ï–¢–°–Ø –í–ò–î –ö–ù–û–ü–ö–ò

    data = callback_query.data.split("#")[-1]
    if data == 'allday' and await db.get_user_allday(callback_query.from_user.id):
        await db.set_allday(callback_query.from_user.id, False)
        await edit_plan(callback_query)
    elif data == 'allday':
        await db.set_allday(callback_query.from_user.id, True)
        await bot.answer_callback_query(callback_query_id=callback_query.id,show_alert=True, text=dialog.allday_message)
        await edit_plan(callback_query)

    # –í–¢–û–†–û–ï - –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –í–†–ï–ú–ï–ù–ò –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø –ü–†–ï–ü–ê–†–ê–¢–ê

    if data == 'time':
        pills_list = await db.get_mypills(callback_query.from_user.id)

        if not pills_list:
            await bot.edit_message_text(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id,text=dialog.None_pills,reply_markup=keyboard.to_main_keyboard, parse_mode='html')
        else:
            text = "<b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è</b><\n\n"
            keyboard.confirm_keyboard = InlineKeyboardMarkup(row_width=2)
            for item in pills_list:
                pill = f"<a href='https://apteka.ru/search/?q={item[1]}'><b>{item[1]}</b></a>:\n–ö—É—Ä—Å –¥–ª–∏—Ç—Å—è <b>{item[2]}/{item[3]}</b> –¥–Ω–µ–π üóì\n–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: <b>{item[7]}</b> ‚è≥\n\n"

                text += pill
                keyboard.confirm_keyboard.insert(InlineKeyboardButton(f"{item[1]}",callback_data=f"time#{item[1]}"))
            keyboard.confirm_keyboard.add(InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data= 'edit'))

            await bot.edit_message_text(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id,text=text,reply_markup=keyboard.confirm_keyboard, parse_mode='html',disable_web_page_preview=True)
    
    # –¢–†–ï–¢–¨–ï - –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ò–ú–ï–ß–ê–ù–ò–ô –ü–†–ï–ü–ê–†–ê–¢–ê

    if data == 'note':
        pills_list = await db.get_mypills(callback_query.from_user.id)

        if not pills_list:
            await bot.edit_message_text(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id,text=dialog.None_pills,reply_markup=keyboard.to_main_keyboard, parse_mode='html')
        else:
            text = "<b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ</b>\n\n"
            keyboard.confirm_keyboard = InlineKeyboardMarkup(row_width=2)
            for item in pills_list:
                
                if item[8]: # –µ—Å–ª–∏ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –Ω–µ –ø—É—Å—Ç—ã–µ, —Ç–æ –≤—ã–≤–æ–¥–∏–º
                    text += f"<a href='https://apteka.ru/search/?q={item[1]}'><b>{item[1]}</b></a>:\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: <b>{item[8]}</b> üóí\n\n"

                keyboard.confirm_keyboard.insert(InlineKeyboardButton(f"{item[1]}",callback_data=f"note#{item[1]}"))
            keyboard.confirm_keyboard.add(InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data= 'edit'))

            await bot.edit_message_text(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id,text=text,reply_markup=keyboard.confirm_keyboard, parse_mode='html',disable_web_page_preview=True)
    
    if data == 'UTC':
      await bot.edit_message_text(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id,text="–ö–∞–∫–æ–µ –≤—Ä–µ–º—è —É —Ç–µ–±—è —Å–µ–π—á–∞—Å? üôÉ\n" + f"–ù–∞–ø—Ä–∏–º–µ—Ä, —É –º–µ–Ω—è: <b>{time.strftime('%H:%M',time.localtime())}</b> üïô" , 
      reply_markup=keyboard.to_edit_keyboard, parse_mode='html')
      await state.update_data(message_id=callback_query.message.message_id)
      await DataState.edit_utc.set()
      
    await bot.answer_callback_query(callback_query.id)
    logging.info(f'Callback Query ~ Catched by <{edit_time.__name__}> func ~ From {callback_query.from_user.id} : @{callback_query.from_user.username}')



# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î

@dp.message_handler(commands=['start'], state = '*')
async def start_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã start. –í—ã–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –∏ –º–µ–Ω—é"""

    # –í–°–ï –ù–ê–ß–ò–ù–ê–ï–¢–°–Ø –° –ö–û–ú–ê–ù–î–´ –°–¢–ê–†–¢, –ü–†–ò –ù–ê–ñ–ê–¢–ò–ò –ü–†–û–í–ï–†–ö–ê –ù–ê –ù–ê–õ–ò–ß–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –í –ë–î
    # –ü–†–ò –û–¢–°–£–¢–°–¢–í–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø - –î–û–ë–ê–í–õ–Ø–ï–ú

    if not await db.exist_user(user_id=message.from_user.id):
        await db.insert_new_user(user_id=message.from_user.id)
    await bot.send_message(message.chat.id,dialog.start_html.format(first_name=message.from_user.first_name),parse_mode='html',reply_markup=keyboard.replMenu_keyboard)
    await menu_handler(message, state)
    logging.info(f'Message Handler ~ Catched by <{start_handler.__name__}> func ~ From {message.from_user.id} : @{message.from_user.username}')

@dp.message_handler(commands=['help'], state = '*')
async def help_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã help. –í—ã–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –∏ –º–µ–Ω—é"""
    await bot.send_message(chat_id=message.chat.id,text=dialog.help,parse_mode='html')
    await state.finish()
    logging.info(f'Message Handler ~ Catched by <{help_handler.__name__}> func ~ From {message.from_user.id} : @{message.from_user.username}')

@dp.message_handler(lambda message: message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üèõ", state = '*')
@dp.message_handler(commands=['menu'], state = '*')
async def menu_handler(message: types.Message,state: FSMContext):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""

    # –î–ê–ë–´ –ù–ï –ü–õ–û–î–ò–¢–¨ –ö–£–ß–£ '–ì–õ–ê–í–ù–´–• –ú–ï–ù–Æ' - –ü–†–ò–î–£–ú–ê–ù–ê –°–ò–ï –ö–û–ù–°–¢–†–£–ö–¶–ò–Ø, –ü–û–ü–´–¢–ö–ê –£–î–ê–õ–ï–ù–ò–ï –°–¢–ê–†–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ
    # ID –ö–û–¢–û–†–û–ì–û –•–†–ê–ù–ò–¢–¨–°–Ø –í –ë–î, –ü–†–ò –ù–ï–£–î–ê–ß–ï - –ü–†–û–î–û–õ–ñ–ê–ï–ú –†–ê–ë–û–¢–£ –ò –ü–†–û–°–¢–û –ó–ê–°–´–õ–ê–ï–ú –ù–û–í–û–ï –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ -> –ó–ê–ü–ò–°–´–í–ê–ï–ú –ï–ì–û ID –í –ë–î

    if await state.get_state() == 'DataState:menu_exec':
        if message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üèõ" or message.text == "/menu":
            await bot.delete_message(message.from_user.id,message.message_id)
        return

    else:
        await DataState.menu_exec.set()
        try:
            main_id = await db.get_main_message_id(message.from_user.id)
            await bot.delete_message(chat_id=message.from_user.id, message_id=main_id[0])
        except:
            pass

        if message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üèõ" or message.text == "/menu":
            await bot.delete_message(message.from_user.id,message.message_id)
        
        shipped = await bot.send_message(message.from_user.id,dialog.mainMenu,reply_markup=keyboard.MainMenu_keyboard)
        await db.set_main_message_id(message_id=shipped.message_id, user_id=message.from_user.id)
        await state.finish()
        logging.info(f'Message Handler ~ Catched by <{menu_handler.__name__}> func ~ From {message.from_user.id} : @{message.from_user.username}')



# FSM –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò addplan

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –≤–æ –≤—Ä–µ–º—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
@dp.callback_query_handler(lambda call: call.data == 'exit' or call.data == 'add',state = DataState.wait_choose)
async def callback_choose(callback_query: types.CallbackQuery, state: FSMContext):
    """–†–∞–∑–≤–µ—Ç–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–æ–∫"""
    
    # –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ –ë–´–õ –ü–†–ï–î–õ–û–ñ–ï–ù–û - –î–û–ë–ê–í–ò–¢–¨ –ó–ê–ú–ï–¢–ö–ò –ò–õ–ò –ù–ï–¢
    # –î–ê - –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –°–õ–ï–î–£–Æ–©–£–Æ –°–¢–ê–î–ò–Æ
    # –ù–ï–¢ - –°–û–•–†–ê–ù–Ø–ï–ú

    addplan_id_message = await state.get_data('message_id')

    if callback_query.data == 'add':
        await bot.answer_callback_query(callback_query.id)
        await bot.edit_message_text(chat_id=callback_query.from_user.id, message_id=addplan_id_message['message_id'],text="–ù–∞–ø–∏—à–∏ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π üìù\n–ù–∞–ø—Ä–∏–º–µ—Ä: <u>–ø–∏—Ç—å –ø–æ—Å–ª–µ –µ–¥—ã</u> üçú" 
            ,reply_markup=keyboard.to_main_keyboard, parse_mode='html')
        await DataState.next()
        
    elif callback_query.data == 'exit':
        user_data = await state.get_data()
        await db.insert_new_data(user_id=callback_query.from_user.id,
                                drug_name=user_data['drug_name'],
                                course_taking=user_data['course_taking'],
                                course_taken=user_data['course_taken'],
                                count_day=user_data['course_inday'],
                                dose=user_data['dose'],
                                time=user_data['time'],
                                note='')
        await bot.edit_message_text(chat_id=callback_query.from_user.id,message_id=addplan_id_message['message_id'], text="<b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!</b> üéâ",parse_mode='html')
        time.sleep(1.5)
        await bot.edit_message_text(chat_id=callback_query.from_user.id, message_id=addplan_id_message['message_id'],text=dialog.mainMenu, reply_markup=keyboard.MainMenu_keyboard)
        await state.finish()
    logging.info(f'FSM Callback Query ~ Catched by <{callback_choose.__name__}> func ~ From {callback_query.from_user.id} : @{callback_query.from_user.username}')

@dp.callback_query_handler(lambda call: call.data == 'menu' or call.data == 'edit', state='*')
async def callback_fsm_menu_edit(callback_query: types.CallbackQuery, state: FSMContext):
    """–í—ã–≤–æ–¥ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é, —á–µ—Ä–µ–∑ callback"""

    # –û–ë–ù–£–õ–ï–ù–ò–ï –°–û–°–¢–û–ù–ò–Ø, –í–´–í–û–î –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ / –ù–ê–°–¢–†–û–ï–ö
    await state.finish()

    if callback_query.data == 'menu':
      await menu_button(callback_query)
    if callback_query.data == 'edit':
      await edit_plan(callback_query)
  
    logging.info(f'FSM Callback Query ~ Catched by <{callback_fsm_menu_edit.__name__}> func ~ From {callback_fsm_menu_edit.from_user.id} : @{callback_fsm_menu_edit.from_user.username}')

async def utc_exist(user_id: int, state: FSMContext):
    addplan_id_message = await state.get_data('message_id')

    utc_exist = await db.get_user_utc(user_id)
    if not utc_exist:
        await bot.edit_message_text(chat_id=user_id, message_id=addplan_id_message['message_id'],text="–ö–∞–∫–æ–µ –≤—Ä–µ–º—è —É —Ç–µ–±—è —Å–µ–π—á–∞—Å? üôÉ\n" + f"–ù–∞–ø—Ä–∏–º–µ—Ä, —É –º–µ–Ω—è: <b>{time.strftime('%H:%M',time.localtime())}</b> üïô" 
        , reply_markup=keyboard.to_main_keyboard, parse_mode='html')
        await DataState.next() # <user_utc_written>
    else:
        await bot.edit_message_text(chat_id=user_id, message_id=addplan_id_message['message_id'],text="–£–∫–∞–∂–∏ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ —Ç–µ–±–µ –ª—É—á—à–µ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å.. ‚è≥" 
            , reply_markup=keyboard.to_main_keyboard)
        await DataState.wait_time.set()

@dp.callback_query_handler(lambda call: call.data == 'skip', state= DataState.wait_dose)
async def skip_dose(callback_query: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –¥–æ–∑–∏—Ä–æ–≤–∫–∏"""
    
    await bot.answer_callback_query(callback_query.id)
    await state.update_data(dose=0)
    await utc_exist(callback_query.from_user.id,state)
    logging.info(f'FSM Message Handler ~ Catched by <{skip_dose.__name__}> func ~ From {callback_query.from_user.id} : @{callback_query.from_user.username}')

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è 
@dp.message_handler(state = DataState.wait_drug_name)
async def drug_name_written(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞"""

    addplan_id_message = await state.get_data('message_id') # id —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã–∑–≤–∞–ª–æ—Å—å –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è - –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    
    # –ù–ï–ú–ù–û–ì–û –ö–û–°–¢–´–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê, –ù–û –ü–û –î–†–£–ì–û–ú–£ –°–û–û–ë–©–ï–ù–ò–Ø –ù–ï –û–¢–†–ï–î–ê–ö–¢–ò–†–£–ï–®–¨
    # –ï–°–õ–ò –í–í–û–î –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ô -> –†–ï–î–ê–ö–¢–ò–†–£–ï–¢–°–Ø –°–û–û–ë–©–ï–ù–ò–ï –ò –û–ñ–ò–î–ê–ù–ò–ï –ü–û–í–¢–û–†–ù–û–ì–û –í–í–û–î–ê, –ß–¢–û–ë–´ –ù–ï –ë–´–õ–û –ò–°–ö–õ–Æ–ß–ï–ù–ò–ô –ò–ó-–ó–ê –¢–û–ì–û, –ß–¢–û –°–û–û–ë–©–ï–ù–ò–ï –û–î–ò–ù–ê–ö–û–í–û–ï, –ö –°–û–û–ë–©–ï–ù–ò–Æ –î–û–ë–ê–í–õ–Ø–ï–¢–°–Ø –†–ê–ù–î–û–ú–ù–´–ô –°–ú–ê–ô–õ–ò–ö :)

    if message.text.isdigit() or not set(".,:;!?_*+=<>()/@$'#^¬§%&){}\"\\").isdisjoint(message.text) or len(message.text) > 60: # –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º–∞—è –¥–ª–∏–Ω–∞
        await bot.delete_message(message.from_user.id, message.message_id)
        try:
            await bot.edit_message_text(chat_id=message.from_user.id, message_id=addplan_id_message['message_id'],text=dialog.input_error + random.choice(dialog.SMILE),reply_markup=keyboard.to_main_keyboard)
        except:
            await bot.edit_message_text(chat_id=message.from_user.id, message_id=addplan_id_message['message_id'],text=dialog.input_error + random.choice(dialog.SMILE),reply_markup=keyboard.to_main_keyboard)
            logging.exception(f'FSM Message Handler Edit ~ Catched by <{drug_name_written.__name__}> func ~ From {message.from_user.id} : @{message.from_user.username}')
        return

    elif await db.exist_drug(message.from_user.id, message.text):
      await bot.delete_message(message.from_user.id, message.message_id)
      try:
          await bot.edit_message_text(chat_id=message.from_user.id, message_id=addplan_id_message['message_id'],text=dialog.drug_exist + random.choice(dialog.SMILE), reply_markup=keyboard.to_main_keyboard)
      except:
          await bot.edit_message_text(chat_id=message.from_user.id, message_id=addplan_id_message['message_id'],text=dialog.drug_exist + random.choice(dialog.SMILE), reply_markup=keyboard.to_main_keyboard)
          logging.exception(f'FSM Message Handler Edit ~ Catched by <{drug_name_written.__name__}> func ~ From {message.from_user.id} : @{message.from_user.username}')
      return

    # –ï–°–õ–ò –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´ - –í–í–ï–î–ï–ù–´–ô –ü–†–ï–ü–ê–†–ê–¢ –ó–ê–ù–û–°–ò–¢–°–Ø –í –ö–≠–®

    await state.update_data(drug_name=message.text)
    await bot.delete_message(message.from_user.id, message.message_id)
    await bot.edit_message_text(chat_id=message.from_user.id, message_id=addplan_id_message['message_id'],text="–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏, —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–ª–∏—Ç—Å—è –ø–æ–ª–Ω—ã–π –∫—É—Ä—Å? üóì",reply_markup=keyboard.to_main_keyboard)
    # –î–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —à–∞–≥–æ–≤ –º–æ–∂–Ω–æ –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –æ–±—Ö–æ–¥—è—Å—å next()
    await DataState.next()
    logging.info(f'FSM Message Handler ~ Catched by <{drug_name_written.__name__}> func ~ From {message.from_user.id} : @{message.from_user.username}')

@dp.message_handler(state = DataState.wait_course_taking)
async def course_taking_written(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–Ω–µ–π –∫—É—Ä—Å–∞ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞"""
    
    addplan_id_message = await state.get_data('message_id')

    if not message.text.isdigit():
        await bot.delete_message(message.from_user.id, message.message_id)
        try:
            await bot.edit_message_text(chat_id=message.from_user.id, message_id=addplan_id_message['message_id'],text=dialog.input_error + random.choice(dialog.SMILE),reply_markup=keyboard.to_main_keyboard)
        except:
            await bot.edit_message_text(chat_id=message.from_user.id, message_id=addplan_id_message['message_id'],text=dialog.input_error + random.choice(dialog.SMILE),reply_markup=keyboard.to_main_keyboard)
            logging.exception(f'FSM Message Handler Edit ~ Catched by <{course_taking_written.__name__}> func ~ From {message.from_user.id} : @{message.from_user.username}')
        return

    elif int(message.text) == 0 or int(message.text) > 365:        
        await bot.delete_message(message.from_user.id, message.message_id)
        try:
            await bot.edit_message_text(chat_id=message.from_user.id, message_id=addplan_id_message['message_id'],text=dialog.input_unreal + random.choice(dialog.SMILE), reply_markup=keyboard.to_main_keyboard)
        except:
            await bot.edit_message_text(chat_id=message.from_user.id, message_id=addplan_id_message['message_id'],text=dialog.input_unreal + random.choice(dialog.SMILE), reply_markup=keyboard.to_main_keyboard)
            logging.exception(f'FSM Message Handler Edit ~ Catched by <{course_taking_written.__name__}> func ~ From {message.from_user.id} : @{message.from_user.username}')
        return

    await state.update_data(course_taking=int(message.text))
    await bot.delete_message(message.from_user.id, message.message_id)
    await bot.edit_message_text(chat_id=message.from_user.id, message_id=addplan_id_message['message_id'],text="–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –∫—É—Ä—Å–∞ —É–∂–µ –ø—Ä–æ—à–ª–æ? üìÜ",reply_markup=keyboard.to_main_keyboard)
   
    await DataState.next()
    logging.info(f'FSM Message Handler ~ Catched by <{course_taking_written.__name__}> func ~ From {message.from_user.id} : @{message.from_user.username}')

@dp.message_handler(state = DataState.wait_course_taken)
async def course_taken_written(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —É–∂–µ –ø—Ä–æ—à–µ–¥–Ω–∏—Ö –¥–Ω–µ–π –∫—É—Ä—Å–∞ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞"""
    
    addplan_id_message = await state.get_data('message_id')
    course_taking = await state.get_data('course_taking')

    if not message.text.isdigit():
        await bot.delete_message(message.from_user.id, message.message_id)

        try:
           await bot.edit_message_text(chat_id=message.from_user.id, message_id=addplan_id_message['message_id'],text=dialog.input_error + random.choice(dialog.SMILE),reply_markup=keyboard.to_main_keyboard)
        except:
            await bot.edit_message_text(chat_id=message.from_user.id, message_id=addplan_id_message['message_id'],text=dialog.input_error + random.choice(dialog.SMILE),reply_markup=keyboard.to_main_keyboard)
            logging.exception(f'FSM Message Handler Edit ~ Catched by <{course_taken_written.__name__}> func ~ From {message.from_user.id} : @{message.from_user.username}')
        return

    elif int(message.text) >= int(course_taking['course_taking']):
        await bot.delete_message(message.from_user.id, message.message_id)
        
        try:
            await bot.edit_message_text(chat_id=message.from_user.id, message_id=addplan_id_message['message_id'],text=dialog.input_more_than_need + random.choice(dialog.SMILE), reply_markup=keyboard.to_main_keyboard)
        except:
            await bot.edit_message_text(chat_id=message.from_user.id, message_id=addplan_id_message['message_id'],text=dialog.input_more_than_need + random.choice(dialog.SMILE), reply_markup=keyboard.to_main_keyboard)
            logging.exception(f'FSM Message Handler Edit ~ Catched by <{course_taken_written.__name__}> func ~ From {message.from_user.id} : @{message.from_user.username}')
        return

    await state.update_data(course_taken=int(message.text))
    await bot.delete_message(message.from_user.id, message.message_id)
    await bot.edit_message_text(chat_id=message.from_user.id, message_id=addplan_id_message['message_id'],text="–°–∫–æ–ª—å–∫–æ —Ç–∞–±–ª–µ—Ç–æ–∫ –Ω—É–∂–Ω–æ –ø–∏—Ç—å –≤ –¥–µ–Ω—å? üíä",reply_markup=keyboard.to_main_keyboard)
   
    await DataState.next()
    logging.info(f'FSM Message Handler ~ Catched by <{course_taken_written.__name__}> func ~ From {message.from_user.id} : @{message.from_user.username}')

@dp.message_handler(state = DataState.wait_inday)
async def course_inday_written(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –∫–æ–ª-–≤–∞ —Ç–∞–±–ª–µ—Ç–æ–∫ –≤ –¥–µ–Ω—å"""
    
    addplan_id_message = await state.get_data('message_id')

    if not message.text.isdigit():
        await bot.delete_message(message.from_user.id, message.message_id)
        try:
            await bot.edit_message_text(chat_id=message.from_user.id, message_id=addplan_id_message['message_id'],text=dialog.input_error + random.choice(dialog.SMILE),reply_markup=keyboard.to_main_keyboard)
        except:
            await bot.edit_message_text(chat_id=message.from_user.id, message_id=addplan_id_message['message_id'],text=dialog.input_error + random.choice(dialog.SMILE),reply_markup=keyboard.to_main_keyboard)
            logging.exception(f'FSM Message Handler Edit ~ Catched by <{course_inday_written.__name__}> func ~ From {message.from_user.id} : @{message.from_user.username}')
        return
    elif int(message.text) == 0 or int(message.text) > 30:  
        await bot.delete_message(message.from_user.id, message.message_id)
        try:
            await bot.edit_message_text(chat_id=message.from_user.id, message_id=addplan_id_message['message_id'],text=dialog.input_unreal + random.choice(dialog.SMILE), reply_markup=keyboard.to_main_keyboard)
        except:
            await bot.edit_message_text(chat_id=message.from_user.id, message_id=addplan_id_message['message_id'],text=dialog.input_unreal + random.choice(dialog.SMILE), reply_markup=keyboard.to_main_keyboard)
            logging.exception(f'FSM Message Handler Edit ~ Catched by <{course_inday_written.__name__}> func ~ From {message.from_user.id} : @{message.from_user.username}')        
        return

    await state.update_data(course_inday=int(message.text))
    await bot.delete_message(message.from_user.id, message.message_id)
    await bot.edit_message_text(chat_id=message.from_user.id, message_id=addplan_id_message['message_id'],text="–ù–∞–ø–∏—à–∏ –¥–æ–∑–∏—Ä–æ–≤–∫—É –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ –≤ –º–≥ üíâ",reply_markup=keyboard.skip_dose)
   
    await DataState.next()
    logging.info(f'FSM Message Handler ~ Catched by <{course_inday_written.__name__}> func ~ From {message.from_user.id} : @{message.from_user.username}')

@dp.message_handler(state = DataState.wait_dose)
async def course_dose_written(message: types.Message, state: FSMContext):
  """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–æ–∑–∏—Ä–æ–≤–∫–∏"""
    
  addplan_id_message = await state.get_data('message_id')

  try:
    float(message.text)
  except:
      await bot.delete_message(message.from_user.id, message.message_id)
      try:
          await bot.edit_message_text(chat_id=message.from_user.id, message_id=addplan_id_message['message_id'],text=dialog.input_error_dose + random.choice(dialog.SMILE), reply_markup=keyboard.skip_dose,parse_mode='html')
      except:
          await bot.edit_message_text(chat_id=message.from_user.id, message_id=addplan_id_message['message_id'],text=dialog.input_error_dose + random.choice(dialog.SMILE), reply_markup=keyboard.skip_dose,parse_mode='html')
          logging.exception(f'FSM Message Handler Edit ~ Catched by <{course_dose_written.__name__}> func ~ From {message.from_user.id} : @{message.from_user.username}')        
      return
  await bot.delete_message(message.from_user.id, message.message_id)
  await state.update_data(dose=float(message.text))

  # –ï–°–õ–ò –£ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ï–©–ï –ù–ï –ó–ê–î–ê–ù –ß–ê–°–û–í–û–ô –ü–û–Ø–° - –ü–ï–†–ï–í–û–î–ò–ú –°–û–°–¢–û–ù–ò–Ø –ù–ê –í–í–û–î –õ–û–ö–ê–õ–¨–ù–û–ì–û –í–†–ï–ú–ï–ù–ò

  await utc_exist(message.from_user.id, state)
  logging.info(f'FSM Message Handler ~ Catched by <{course_dose_written.__name__}> func ~ From {message.from_user.id} : @{message.from_user.username}')

@dp.message_handler(state = DataState.edit_utc)
@dp.message_handler(state = DataState.wait_utc)
async def user_utc_written(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏, –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
    
    addplan_id_message = await state.get_data('message_id')

    if re.search(r'^(([0,1][0-9])|(2[0-3])):[0-5][0-9]$', message.text):
        await bot.delete_message(message.from_user.id, message.message_id)
        await db.set_utc(message.from_user.id,functions.utc_delta(message))
    else:
        await bot.delete_message(message.from_user.id, message.message_id)
        try:
            await bot.edit_message_text(chat_id=message.from_user.id, message_id=addplan_id_message['message_id'],text=dialog.input_error_time + random.choice(dialog.SMILE),reply_markup=keyboard.to_main_keyboard,parse_mode='html')
        except:
            await bot.edit_message_text(chat_id=message.from_user.id, message_id=addplan_id_message['message_id'],text=dialog.input_error_time + random.choice(dialog.SMILE),reply_markup=keyboard.to_main_keyboard,parse_mode='html')
            logging.exception(f'FSM Message Handler Edit ~ Catched by <{user_utc_written.__name__}> func ~ From {message.from_user.id} : @{message.from_user.username}')

        return
  
    if await state.get_state() == 'DataState:edit_utc':
      await bot.edit_message_text(chat_id=message.from_user.id, message_id=addplan_id_message['message_id'], text="<b>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –æ–±–Ω–æ–≤–ª–µ–Ω!</b> üéâ", parse_mode='html')
      time.sleep(1.5)
      
      if await db.get_user_allday(message.from_user.id):
        await bot.edit_message_text(chat_id=message.from_user.id, message_id=addplan_id_message['message_id'], text=dialog.edit, reply_markup=keyboard.edit_true_keyboard)
      else:
        await bot.edit_message_text(chat_id=message.from_user.id, message_id=addplan_id_message['message_id'], text=dialog.edit, reply_markup=keyboard.edit_false_keyboard)
      
      await state.finish()
      logging.info(f'FSM Message Handler ~ Catched by <{user_utc_written.__name__}> func ~ From {message.from_user.id} : @{message.from_user.username}')
      
      return

    await bot.edit_message_text(chat_id=message.from_user.id, message_id=addplan_id_message['message_id'],text="–£–∫–∞–∂–∏ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ —Ç–µ–±–µ –Ω–∞–ø–æ–º–Ω–∏—Ç—å.. ‚è≥" 
      ,reply_markup=keyboard.to_main_keyboard)

    await DataState.next()
    logging.info(f'FSM Message Handler ~ Catched by <{user_utc_written.__name__}> func ~ From {message.from_user.id} : @{message.from_user.username}')

@dp.message_handler(state = DataState.edit_time)
@dp.message_handler(state = DataState.wait_time)
async def course_time_written(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    
    addplan_id_message = await state.get_data('message_id')

    if re.search(r'^(([0,1][0-9])|(2[0-3])):[0-5][0-9]$', message.text):
        await bot.delete_message(message.from_user.id, message.message_id)
        await state.update_data(time=message.text)
    else:
        await bot.delete_message(message.from_user.id, message.message_id)
        try:
            await bot.edit_message_text(chat_id=message.from_user.id, message_id=addplan_id_message['message_id'],text=dialog.input_error_time + random.choice(dialog.SMILE),reply_markup=keyboard.to_main_keyboard,parse_mode='html')
        except:
            await bot.edit_message_text(chat_id=message.from_user.id, message_id=addplan_id_message['message_id'],text=dialog.input_error_time + random.choice(dialog.SMILE),reply_markup=keyboard.to_main_keyboard,parse_mode='html')
            logging.exception(f'FSM Message Handler Edit ~ Catched by <{course_time_written.__name__}> func ~ From {message.from_user.id} : @{message.from_user.username}')
        return

    ### –†–ê–ó–í–ò–õ–ö–ê –ü–†–ò –†–ê–ó–õ–ò–ß–ù–´–• –°–û–°–¢–û–Ø–ù–ò–Ø–•: –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–òE –í–†–ï–ú–ï–ù–ò –ò–õ–ò –û–ñ–ò–î–ê–ù–òE –í–†–ï–ú–ï–ù–ò –ü–†–ò –î–û–ë–ê–í–õ–ï–ù–ò–ò –ù–û–í–û–ì–û –ü–†–ï–ü–ê–†–ê–¢–ê

    if await state.get_state() == 'DataState:wait_time':

        await bot.edit_message_text(chat_id=message.from_user.id, message_id=addplan_id_message['message_id'],text="–ü–æ –∂–µ–ª–∞–Ω–∏—é –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—á–∞–Ω–∏—è üóí" 
            , reply_markup=keyboard.exit_or_add_keyboard)
        await DataState.next()

    elif await state.get_state() == 'DataState:edit_time':

        edit_time = await state.get_data()
        await db.set_time(user_id=message.from_user.id,hh_mm=edit_time['time'],drug_name=edit_time['drug_name'])

        await bot.edit_message_text(chat_id=message.from_user.id,message_id=addplan_id_message['message_id'], text="<b>–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ!</b> üéâ", parse_mode='html')
        time.sleep(1.5)
        await bot.edit_message_text(chat_id=message.from_user.id,message_id=addplan_id_message['message_id'],text=dialog.mainMenu, reply_markup=keyboard.MainMenu_keyboard)
        await state.finish()
    logging.info(f'FSM Message Handler ~ Catched by <{course_time_written.__name__}> func ~ From {message.from_user.id} : @{message.from_user.username}')

@dp.message_handler(state = DataState.edit_note)
@dp.message_handler(state = DataState.wait_note)
async def course_note_written(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∑–∞–º–µ—Ç–æ–∫"""
    
    addplan_id_message = await state.get_data('message_id')
    await state.update_data(note=message.text)
    user_data = await state.get_data()

    if len(message.text) > 70:
        await bot.delete_message(message.from_user.id, message.message_id)
        try:
            await bot.edit_message_text(chat_id=message.from_user.id, message_id=addplan_id_message['message_id'],text=dialog.input_error + random.choice(dialog.SMILE),reply_markup=keyboard.to_main_keyboard)
        except:
            await bot.edit_message_text(chat_id=message.from_user.id, message_id=addplan_id_message['message_id'],text=dialog.input_error + random.choice(dialog.SMILE),reply_markup=keyboard.to_main_keyboard)
            logging.exception(f'FSM Message Handler Edit ~ Catched by <{drug_name_written.__name__}> func ~ From {message.from_user.id} : @{message.from_user.username}')
        return

    # –†–ê–ó–í–ò–õ–ö–ê, –ï–°–õ–ò –°–û–°–¢–û–Ø–ù–ò–ï –î–û–ë–ê–í–õ–ï–ù–ò–ï - –ë–ï–†–ï–ú –í–°–ï –í–ù–ï–°–ï–ù–ù–´–ï –î–ê–ù–ù–´–ï –ò–ó –ö–≠–®–ê –ò –°–û–•–†–ê–ù–Ø–ï–ú –ö–ê–ö –ù–û–í–û–ï –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï
    # –ï–°–õ–ò –°–û–°–¢–û–Ø–ù–ò–ï –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø - –û–ë–ù–û–í–õ–Ø–ï–ú –ü–†–ò–ú–ï–ß–ê–ù–ò–Ø –£ –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø
    # –°–ë–†–ê–°–´–í–ê–ï–ú –°–û–°–¢–û–Ø–ù–ò–ï –ò –ö–≠–®

    if await state.get_state() == 'DataState:wait_note':

        await db.insert_new_data(user_id=message.from_user.id,
                            drug_name=user_data['drug_name'],
                            course_taking=user_data['course_taking'],
                            course_taken=user_data['course_taken'],
                            count_day=user_data['course_inday'],
                            dose=user_data['dose'],
                            time=user_data['time'],
                            note=user_data['note'])
        await bot.delete_message(message.from_user.id,message.message_id)
        await bot.edit_message_text(chat_id=message.from_user.id,message_id=addplan_id_message['message_id'], text="<b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!</b> üéâ",parse_mode='html')

    elif await state.get_state() == 'DataState:edit_note':

        edit_note = await state.get_data()
        await db.set_note(user_id=message.from_user.id, drug_name=edit_note['drug_name'],note=edit_note['note'])
        await bot.delete_message(message.from_user.id,message.message_id)
        await bot.edit_message_text(chat_id=message.from_user.id,message_id=addplan_id_message['message_id'], text="<b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!</b> üéâ",parse_mode='html')

    time.sleep(1.5)
    await bot.edit_message_text(chat_id=message.from_user.id,message_id=addplan_id_message['message_id'],text=dialog.mainMenu, reply_markup=keyboard.MainMenu_keyboard)
    await state.finish()
    logging.info(f'FSM Message Handler ~ Catched by <{course_note_written.__name__}> func ~ From {message.from_user.id} : @{message.from_user.username}')



# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ù–¢–ï–ù–¢–ê
@dp.message_handler(content_types=['sticker'])
async def sticker_message(message: types.Message):
    """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∏–∫–µ—Ä—ã, –¥–∞–±—ã –Ω–µ –±—ã–ª–æ —Å–ø–∞–º–∞"""
    await bot.delete_message(message.from_user.id, message.message_id)
    logging.info(f'Content Message Handler ~ Catched by <{sticker_message.__name__}> func ~ From {message.from_user.id} : @{message.from_user.username}')

@dp.message_handler(content_types=['sticker'], state = '*')
async def sticker_message_fsm(message: types.Message):
    """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∏–∫–µ—Ä—ã, –¥–∞–±—ã –Ω–µ –±—ã–ª–æ —Å–ø–∞–º–∞. –ü—Ä–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–∏."""
    await bot.delete_message(message.from_user.id, message.message_id)
    logging.info(f'FSM Content Message Handler ~ Catched by <{sticker_message_fsm.__name__}> func ~ From {message.from_user.id} : @{message.from_user.username}')

@dp.message_handler(content_types=['text'])
async def echo_message(message: types.Message):
    """–£–¥–∞–ª—è–µ—Ç —Ç–µ–∫—Å—Ç, –¥–∞–±—ã –Ω–µ –±—ã–ª–æ —Å–ø–∞–º–∞"""
    await bot.delete_message(message.from_user.id, message.message_id)
    logging.info(f'Content Message Handler ~ Catched by <{echo_message.__name__}> func ~ From {message.from_user.id} : @{message.from_user.username}')

@dp.message_handler(content_types=ContentType.ANY)
async def unknown_message(message: types.Message):
    """–û—Ç–≤–µ—Ç –Ω–∞ –ª—é–±–æ–π –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –∫—Ä–æ–º–µ 'text'"""
    await message.reply(dialog.idontknow, parse_mode='html')
    logging.info(f'FSM Content Message Handler ~ Catched by <{unknown_message.__name__}> func ~ From {message.from_user.id} : @{message.from_user.username}')

@dp.message_handler(content_types=ContentType.ANY, state = '*')
async def unknown_message_fsm(message: types.Message):
    """–û—Ç–≤–µ—Ç –Ω–∞ –ª—é–±–æ–π –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –∫—Ä–æ–º–µ 'text'. –ü—Ä–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–∏."""
    await bot.delete_message(message.from_user.id, message.message_id)
    logging.info(f'FSM Content Message Handler ~ Catched by <{unknown_message_fsm.__name__}> func ~ From {message.from_user.id} : @{message.from_user.username}')
