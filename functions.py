import shutil
import time
import bot

from datetime import datetime, timedelta
from keyboards import keyboard
from database import database_ as db
from aiogram import types, asyncio

def logs_backup():
    """–ë—ç–∫–∞–ø –ª–æ–≥–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±–æ—Ç–∞"""
    shutil.copy(f'what_happens.log', f'crash_logs_{time.strftime("%d_%m", time.localtime())}.log')

async def send_notification():
    """–†–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏"""

    # –í–´–°–ß–ò–¢–´–í–ê–ï–ú –õ–û–ö–ê–õ–¨–ù–û–ï –í–†–ï–ú–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ß–ï–†–ï–ó: UTC-0 +(-) –ß–ê–°–û–í–û–ô –ü–û–Ø–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
    # –ï–°–õ–ò –í–´–°–ß–ò–¢–ê–ù–ù–û–ï –†–ê–í–ù–û –í–†–ï–ú–ï–ù–ò –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø - –ù–ê–ü–û–ú–ò–ù–ê–ï–ú (–ù–ê –£–†–û–í–ù–ï –ë–î –ù–ï –£–ß–ò–¢–´–í–ê–Æ–¢–°–Ø –¢–ê–ë–õ–ï–¢–ö–ò –° N/N –ü–†–û–ü–ò–¢–û–ì–û –í –î–ï–ù–¨)

    for utc in range(-12,14):
        notification_list = await db.get_join_pills_data(utc, calc_notification_time(utc))
        if notification_list:
            users = dict() 
            for item in notification_list:

                text = f"–•—ç–π-—Ö—ç–π, –Ω–µ –∑–∞–±—É–¥—å –ø—Ä–∏–Ω—è—Ç—å! üì£\n\n"

                try:
                    main_id = await db.get_main_message_id(item[0])
                    await bot.bot.delete_message(chat_id=item[0], message_id=main_id[0])
                except:
                    pass
                
                if not item[0] in users:
                    users[item[0]] = [(item[1], item[2], item[3])]
                else:
                    users[item[0]] += [(item[1], item[2], item[3])]

            for key, value in users.items():
                for item in value:
                    text += f"<a href='https://apteka.ru/search/?q={item[0]}'><b>{item[0]}</b></a>: o—Å—Ç–∞–ª–æ—Å—å <b>{item[2] - item[1]}</b> —Å—É—Ç–æ—á–Ω—ã—Ö –ø—Ä–∏—ë–º–æ–≤ üíä\n\n"
                
                shipped = await bot.bot.send_message(chat_id=key,text=text,reply_markup=keyboard.notification_keyboard,parse_mode='html',disable_web_page_preview=True)
                await db.set_main_message_id(message_id=shipped.message_id,user_id=key)

async def zeroing_count_taken():
    """–ó–∞–Ω—É–ª–µ–Ω–∏–µ –≤—ã–ø–∏—Ç–æ–≥–æ –≤ –¥–µ–Ω—å –ø–æ user localtime"""
    for utc in range(-12,14):
        if calc_notification_time(utc) == '00:00':
            await db.set_allcount_inday_to_null(utc=utc)

async def allday_send_message(header_text: str, utc: int):
    """–§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–∏ allday –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏"""
    allday_list = await db.get_allday_users(utc)
    if allday_list:
        for telegram_id in allday_list:
            user_pills = await db.get_notification_mypills(telegram_id[0])
            text = header_text
            for item in user_pills:
                text += f"<a href='https://apteka.ru/search/?q={item[1]}'><b>{item[1]}</b></a>: –û—Å—Ç–∞–ª–æ—Å—å <b>{item[3] - item[2]}</b> –¥–Ω–µ–π –∫—É—Ä—Å–∞ –∏ <b>{item[5] - item[4]}</b> —Å—É—Ç–æ—á–Ω—ã—Ö –ø—Ä–∏—ë–º–æ–≤ üíä\n\n"
            
            try:
                main_id = await db.get_main_message_id(telegram_id[0])
                await bot.bot.delete_message(chat_id=telegram_id[0], message_id=main_id[0])
            except:
                pass
                
            shipped = await bot.bot.send_message(chat_id=telegram_id[0],text=text,reply_markup=keyboard.notification_keyboard,parse_mode='html',disable_web_page_preview=True)
            await db.set_main_message_id(message_id=shipped.message_id, user_id=telegram_id[0])

async def send_notification_allday():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è allday"""

    #–í–´–°–´–õ–ê–ï–ú –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø, –ö–û–ì–î–ê –õ–û–ö–ê–õ–¨–ù–û–ï –í–†–ï–ú–Ø –Æ–ó–ï–†–ê –†–ê–í–ù–û –û–î–ù–û–ú–£ –ò–ó, –ò –ö–û–ì–î–ê ALLDAY = 1

    for utc in range(-10,14):
        if calc_notification_time(utc) == '08:00':
            await allday_send_message('<b>–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!</b> ‚òÄÔ∏è\n', utc)
        elif calc_notification_time(utc) == '12:00':
            await allday_send_message('<b>–î–æ–±—Ä—ã–π –¥–µ–Ω—å!</b> üèû\n', utc)
        elif calc_notification_time(utc) == '18:00':
            await allday_send_message('<b>–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä!</b> üåá\n', utc)

def utc_delta(message: types.Message):
    """–†–∞—Å—á–µ—Ç UTC –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""

    user_time = message.text.split(':') # –í—Ä–µ–º—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—ã, –º–∏–Ω—É—Ç—ã –∏ —Å–µ–∫—É–Ω–¥—ã
    utc_time = datetime.utcnow() # –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ UTC –∏–∑ message
    
    if message.date.day < utc_time.day: 

        # –µ—Å–ª–∏ –¥–µ–Ω–± –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–µ–Ω—å—à–µ —á–µ–º –¥–µ–Ω—å UTC, —Ç.–µ. –Ω–∞–ø—Ä. 18.04 23:00 < 19.04 02:00
        # —Ç–æ–≥–¥–∞ –¥–µ–ª–∞–µ–º –≤–æ—Ç —Ç–∞–∫—É—é –º–∞—Ö–∏–Ω–∞—Ü–∏—é

        return -24 - (utc_time.hour - int(user_time[0]))
    elif int(user_time[0]) > utc_time.hour:

        return -(utc_time.hour - int(user_time[0]))
    elif int(user_time[0]) < utc_time.hour:

        return utc_time.hour - int(user_time[0])

def calc_notification_time(user_utc: int):
    """–§—É–Ω–∫—Ü–∏—è –≤—ãc—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –ø–æ UTC 0 –∏–∑: –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è +(-) —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç datetime.%H:%M"""

    if user_utc < 0:
        utc = time.strptime(f'{str(-user_utc)}', '%H')
        calculated = timedelta(hours=datetime.utcnow().hour, minutes=datetime.utcnow().minute) - timedelta(hours=utc.tm_hour)  
    else:
        utc = time.strptime(f'{str(user_utc)}', '%H')
        calculated = timedelta(hours=datetime.utcnow().hour, minutes=datetime.utcnow().minute) + timedelta(hours=utc.tm_hour)

    recalculated = timedelta(seconds=calculated.seconds) # –ø–æ—Ç–æ–º—É —á—Ç–æ –∏–Ω–æ–≥–¥–∞ calculated –≤–æ–≤–∑—Ä–∞—â–∞–µ—Ç: days, H:M:S. –ê –Ω—É–∂–Ω–æ H:M:S
    return datetime.strptime(str(recalculated), '%H:%M:%S').strftime('%H:%M')

async def on_shutdown(dp):
    db.close_connection()
    logs_backup()
